import { NextRequest, NextResponse } from "next/server";
import axios from "axios";
import { cookies } from 'next/headers';

export async function GET(req: NextRequest) {
  try {
    const code = req.nextUrl.searchParams.get("code");
    const state = req.nextUrl.searchParams.get("state");
    
    // Get cookies
    const cookieStore = cookies();
    const storedState = (await cookieStore).get('spotify_auth_state')?.value;

    // Validate state
    if (!state || state !== storedState) {
      return new NextResponse("Invalid state parameter", { status: 400 });
    }

    // Get stored data from cookies
    const mood = (await cookieStore).get('spotify_mood')?.value;
    const songs = JSON.parse((await cookieStore).get('spotify_songs')?.value || "[]");

    // Cleanup cookies
    (await cookieStore).delete('spotify_auth_state');
    (await cookieStore).delete('spotify_mood');
    (await cookieStore).delete('spotify_songs');

    
    // Exchange code for tokens
    const tokenResponse = await axios.post(
      "https://accounts.spotify.com/api/token",
      new URLSearchParams({
        grant_type: "authorization_code",
        code: code!,
        redirect_uri: `${process.env.NEXTAUTH_URL}/api/spotify-auth`,
        client_id: process.env.SPOTIFY_CLIENT_ID!,
        client_secret: process.env.SPOTIFY_CLIENT_SECRET!,
      }),
      {
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
        },
      }
    );
    // Create playlist
    const playlistResponse = await axios.post(
      "https://api.spotify.com/v1/me/playlists",
      {
        name: `Feels-on-Beat: ${mood} - ${new Date().toLocaleDateString()}`,
        description: "Auto-generated by Feels-on-Beat",
        public: true,
      },
      {
        headers: {
          Authorization: `Bearer ${tokenResponse.data.access_token}`,
        },
      }
    );

    // Search tracks
    const trackUris = await Promise.all(
      songs.map(async (song: string) => {
        try {
          const searchResponse = await axios.get(
            `https://api.spotify.com/v1/search?q=${encodeURIComponent(song)}&type=track&limit=1`,
            {
              headers: {
                Authorization: `Bearer ${tokenResponse.data.access_token}`,
              },
            }
          );
          return searchResponse.data.tracks.items[0]?.uri;
        } catch (err) {
          console.error(`Failed to find track: ${song}`);
          return null;
        }
      })
    );

    // Add tracks to playlist
    await axios.post(
      `https://api.spotify.com/v1/playlists/${playlistResponse.data.id}/tracks`,
      {
        uris: trackUris.filter(uri => uri),
      },
      {
        headers: {
          Authorization: `Bearer ${tokenResponse.data.access_token}`,
        },
      }
    );

    // Redirect to the created playlist
    return NextResponse.redirect(playlistResponse.data.external_urls.spotify);
  } catch (error) {
    console.error("Spotify auth error:", error);
    return new NextResponse("Playlist creation failed", { status: 500 });
  }
}